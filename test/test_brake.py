#!/usr/bin/env python3
"""
test_brake.py - Teste Independente do Sistema de Freios
Testa o BrakeManager de forma isolada para verificar funcionamento
"""

import os
import sys
import time

# Adiciona o diret√≥rio raspberry ao path
sys.path.append(os.path.join(os.path.dirname(__file__), "..", "raspberry"))

try:
    from brake_manager import BrakeManager

    print("‚úì BrakeManager importado com sucesso")
except ImportError as e:
    print(f"‚ùå Erro ao importar BrakeManager: {e}")
    exit(1)

try:
    import board
    import busio
    from adafruit_pca9685 import PCA9685

    print("‚úì Bibliotecas PCA9685 importadas com sucesso")
    PCA9685_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è PCA9685 n√£o dispon√≠vel: {e}")
    print("   Instale: sudo pip3 install adafruit-circuitpython-pca9685")
    PCA9685_AVAILABLE = False


def test_brake_basic():
    """Teste b√°sico do sistema de freios"""
    print("\n=== TESTE B√ÅSICO DOS FREIOS ===")

    # Cria inst√¢ncia do brake manager
    brake = BrakeManager(
        brake_balance=60.0,  # 60% frontal, 40% traseiro
        max_brake_force=90.0,
        response_time=0.1,
    )

    print("Brake Manager criado:")
    print(f"  - Balan√ßo de freio: {brake.brake_balance}%")
    print(f"  - For√ßa m√°xima: {brake.max_brake_force}%")
    print(f"  - GPIO frontal: {brake.front_pin}")
    print(f"  - GPIO traseiro: {brake.rear_pin}")

    # Tenta inicializar
    print("\n--- Inicializando sistema de freios ---")
    if brake.initialize():
        print("‚úÖ Sistema de freios inicializado com sucesso!")
        return brake
    else:
        print("‚ùå Falha ao inicializar sistema de freios")
        return None


def test_brake_application(brake):
    """Teste de aplica√ß√£o de freios"""
    print("\n=== TESTE DE APLICA√á√ÉO DE FREIOS ===")

    # Sequ√™ncia de testes
    test_sequence = [
        ("Sem freio", 0.0),
        ("Freio leve", 20.0),
        ("Freio m√©dio", 50.0),
        ("Freio forte", 80.0),
        ("Freio m√°ximo", 100.0),
        ("Freio moderado", 60.0),
        ("Libera√ß√£o gradual", 30.0),
        ("Libera√ß√£o total", 0.0),
    ]

    for description, brake_force in test_sequence:
        print(f"\nüõë Testando {description}: {brake_force}%")

        # Aplica freio
        brake.apply_brake(brake_force)

        # Aguarda estabilizar
        time.sleep(1.0)

        # Mostra status
        status = brake.get_brake_status()
        front_percent = status.get("front_brake_percent", 0)
        rear_percent = status.get("rear_brake_percent", 0)
        total = status.get("total_brake_input", 0)

        print(f"   ‚Üí Freio frontal: {front_percent:.1f}%")
        print(f"   ‚Üí Freio traseiro: {rear_percent:.1f}%")
        print(f"   ‚Üí Total aplicado: {total:.1f}%")

        # Pausa entre aplica√ß√µes
        time.sleep(0.5)


def test_brake_balance(brake):
    """Teste de balan√ßo de freios"""
    print("\n=== TESTE DE BALAN√áO DE FREIOS ===")

    # Diferentes configura√ß√µes de balan√ßo
    balance_configs = [
        (50.0, "Equilibrado"),  # 50% frontal, 50% traseiro
        (70.0, "Mais frontal"),  # 70% frontal, 30% traseiro
        (30.0, "Mais traseiro"),  # 30% frontal, 70% traseiro
        (100.0, "S√≥ frontal"),  # 100% frontal, 0% traseiro
        (0.0, "S√≥ traseiro"),  # 0% frontal, 100% traseiro
        (60.0, "Padr√£o F1"),  # 60% frontal, 40% traseiro
    ]

    # For√ßa de teste constante
    test_force = 50.0

    for balance, description in balance_configs:
        print(f"\n‚öñÔ∏è Testando {description}: {balance}% frontal")

        # Define novo balan√ßo
        brake.set_brake_balance(balance)

        # Aplica for√ßa de teste
        brake.apply_brake(test_force)
        time.sleep(0.5)

        # Mostra distribui√ß√£o
        status = brake.get_brake_status()
        front_percent = status.get("front_brake_percent", 0)
        rear_percent = status.get("rear_brake_percent", 0)

        print(f"   ‚Üí Com {test_force}% de for√ßa:")
        print(f"   ‚Üí Frontal: {front_percent:.1f}%")
        print(f"   ‚Üí Traseiro: {rear_percent:.1f}%")

        # Libera freios
        brake.release_brakes()
        time.sleep(0.3)


def test_emergency_brake(brake):
    """Teste de freio de emerg√™ncia"""
    print("\n=== TESTE DE FREIO DE EMERG√äNCIA ===")

    print("üö® Ativando freio de emerg√™ncia...")

    # Ativa freio de emerg√™ncia
    brake.emergency_brake()
    time.sleep(1.0)

    # Verifica status
    status = brake.get_brake_status()
    front_percent = status.get("front_brake_percent", 0)
    rear_percent = status.get("rear_brake_percent", 0)

    print(f"   ‚Üí Freio frontal emerg√™ncia: {front_percent:.1f}%")
    print(f"   ‚Üí Freio traseiro emerg√™ncia: {rear_percent:.1f}%")

    # Aguarda e libera
    time.sleep(2.0)
    print("\n‚úÖ Liberando freio de emerg√™ncia...")
    brake.release_brakes()
    time.sleep(1.0)


def test_brake_limits(brake):
    """Teste dos limites do sistema"""
    print("\n=== TESTE DE LIMITES ===")

    # Testa valores extremos
    extreme_values = [-50.0, 0.0, 100.0, 150.0]

    for value in extreme_values:
        print(f"\n‚ö†Ô∏è Testando valor extremo: {value}%")
        brake.apply_brake(value)
        time.sleep(0.5)

        status = brake.get_brake_status()
        actual_input = status.get("total_brake_input", 0)
        front_percent = status.get("front_brake_percent", 0)
        rear_percent = status.get("rear_brake_percent", 0)

        print(f"   ‚Üí Valor aplicado: {actual_input:.1f}%")
        print(f"   ‚Üí Frontal: {front_percent:.1f}%")
        print(f"   ‚Üí Traseiro: {rear_percent:.1f}%")

        # Libera freios
        brake.release_brakes()
        time.sleep(0.3)


def test_brake_statistics(brake):
    """Teste das estat√≠sticas do sistema"""
    print("\n=== ESTAT√çSTICAS DO SISTEMA ===")

    stats = brake.get_statistics()

    print("üìä Estat√≠sticas:")
    print(f"   ‚Üí Aplica√ß√µes de freio: {stats.get('brake_applications', 0)}")
    print(f"   ‚Üí Freios de emerg√™ncia: {stats.get('emergency_brakes', 0)}")
    print(f"   ‚Üí Tempo ativo: {stats.get('active_time', 0):.1f}s")
    print(f"   ‚Üí For√ßa m√°xima aplicada: {stats.get('max_force_applied', 0):.1f}%")
    print(f"   ‚Üí Sistema inicializado: {stats.get('is_initialized', False)}")

    # Status atual
    status = brake.get_brake_status()
    print("\nüìã Status atual:")
    print(f"   ‚Üí Balan√ßo: {status.get('brake_balance', 0):.1f}%")
    print(f"   ‚Üí For√ßa total: {status.get('total_brake_input', 0):.1f}%")
    print(f"   ‚Üí Frontal: {status.get('front_brake_percent', 0):.1f}%")
    print(f"   ‚Üí Traseiro: {status.get('rear_brake_percent', 0):.1f}%")


def main():
    """Fun√ß√£o principal do teste"""
    print("üõë === TESTE DO BRAKE MANAGER ===")
    print("Este teste verifica o funcionamento do sistema de freios")
    print("Certifique-se de que os servos est√£o conectados ao PCA9685:")
    print("  - Freio frontal: Canal 0 do PCA9685")
    print("  - Freio traseiro: Canal 1 do PCA9685")
    print("  - PCA9685 conectado via I2C (SDA=GPIO2, SCL=GPIO3)")
    if not PCA9685_AVAILABLE:
        print("‚ö†Ô∏è Aviso: PCA9685 n√£o dispon√≠vel - sistema funcionar√° em modo simula√ß√£o")
    print()

    # Teste b√°sico
    brake = test_brake_basic()
    if not brake:
        print("‚ùå N√£o foi poss√≠vel inicializar - encerrando teste")
        return

    try:
        # Aguarda estabiliza√ß√£o
        print("\n‚è≥ Aguardando estabiliza√ß√£o do sistema...")
        time.sleep(2.0)

        # Testes funcionais
        test_brake_application(brake)
        test_brake_balance(brake)
        test_emergency_brake(brake)
        test_brake_limits(brake)
        test_brake_statistics(brake)

        print("\n‚úÖ Teste conclu√≠do com sucesso!")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Teste interrompido pelo usu√°rio")

    except Exception as e:
        print(f"\n‚ùå Erro durante teste: {e}")

    finally:
        # Cleanup
        print("\nüîß Finalizando sistema...")
        try:
            brake.release_brakes()
            time.sleep(0.5)
            brake.cleanup()
            print("‚úì Sistema finalizado corretamente")
        except:
            print("‚ö†Ô∏è Erro na finaliza√ß√£o")


if __name__ == "__main__":
    main()
