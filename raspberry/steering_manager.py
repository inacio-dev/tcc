#!/usr/bin/env python3
"""
steering_manager.py - Sistema de Dire√ß√£o do Carrinho F1
Controla dire√ß√£o com servo MG996R via PCA9685

PINOUT PCA9685 + SERVO MG996R (DIRE√á√ÉO):
=========================================
PCA9685 -> Raspberry Pi 4 (I2C) [COMPARTILHADO COM FREIOS]
- VCC    -> Pin 2 (5V) ou fonte externa 6V
- GND    -> Pin 6 (GND)
- SCL    -> Pin 5 (GPIO3/SCL)
- SDA    -> Pin 3 (GPIO2/SDA)

Servo Dire√ß√£o -> PCA9685
- VCC (Vermelho)  -> V+ (fonte externa 6V recomendada)
- GND (Marrom)    -> GND
- Signal (Laranja)-> Canal 2 do PCA9685

MAPEAMENTO COMPLETO DOS CANAIS PCA9685:
======================================
Canal 0: Freio frontal (brake_manager.py)
Canal 1: Freio traseiro (brake_manager.py)
Canal 2: Dire√ß√£o (steering_manager.py) <-- ESTE ARQUIVO
Canais 3-15: Dispon√≠veis para expans√£o

CARACTER√çSTICAS MG996R (DIRE√á√ÉO):
=================================
- Tens√£o: 4.8V - 7.2V (recomendado 6V)
- Torque: 11kg.cm @ 6V (suficiente para dire√ß√£o)
- Velocidade: 0.14s/60¬∞ @ 6V
- √Çngulo √∫til: 0¬∞ - 180¬∞ (90¬∞ = centro)
- PWM: 50Hz, pulso 1.0ms-2.0ms
- Corrente: ~1.5A sob carga

CONFIGURA√á√ÉO MEC√ÇNICA:
=====================
- 0¬∞ = M√°ximo √† esquerda
- 90¬∞ = Centro (frente)
- 180¬∞ = M√°ximo √† direita
- Range √∫til: 0¬∞ a 180¬∞ (¬±90¬∞ do centro)
- Ackermann: Geometria de dire√ß√£o correta para F1

CONFIGURA√á√ÉO NECESS√ÅRIA:
=======================
sudo raspi-config -> Interface Options -> I2C -> Enable
sudo pip3 install adafruit-circuitpython-pca9685
"""

import math
import threading
import time
from enum import Enum
from typing import Any, Dict

try:
    import board
    import busio
    from adafruit_motor import servo
    from adafruit_pca9685 import PCA9685

    PCA9685_AVAILABLE = True
    print("‚úì PCA9685 dispon√≠vel")
except ImportError:
    print(
        "‚ùå PCA9685 n√£o dispon√≠vel - instale: sudo pip3 install adafruit-circuitpython-pca9685"
    )
    PCA9685_AVAILABLE = False
    exit(1)  # Para execu√ß√£o se PCA9685 n√£o dispon√≠vel


class SteeringMode(Enum):
    """Modos de dire√ß√£o"""

    NORMAL = "normal"  # Dire√ß√£o normal
    SPORT = "sport"  # Dire√ß√£o esportiva (mais sens√≠vel)
    COMFORT = "comfort"  # Dire√ß√£o confort√°vel (menos sens√≠vel)
    PARKING = "parking"  # Assist√™ncia para estacionamento


class SteeringManager:
    """Gerencia sistema de dire√ß√£o do carrinho F1 via PCA9685"""

    # ================== CONFIGURA√á√ïES F√çSICAS ==================

    # Canal PCA9685 do servo de dire√ß√£o
    STEERING_CHANNEL = 2  # Canal 2 do PCA9685

    # Endere√ßo I2C do PCA9685 (compartilhado com brake_manager)
    PCA9685_I2C_ADDRESS = 0x40  # Endere√ßo padr√£o do PCA9685

    # Caracter√≠sticas do servo MG996R
    PWM_FREQUENCY = 50  # 50Hz para servos
    PULSE_MIN = 1.0  # 1.0ms = 0¬∞ (m√°ximo esquerda)
    PULSE_MAX = 2.0  # 2.0ms = 180¬∞ (m√°ximo direita)
    PULSE_CENTER = 1.5  # 1.5ms = 90¬∞ (centro)

    # Limites mec√¢nicos da dire√ß√£o (em graus) - RANGE COMPLETO MG996R
    STEERING_MIN_ANGLE = 0   # 0¬∞ = m√°ximo √† esquerda
    STEERING_MAX_ANGLE = 180 # 180¬∞ = m√°ximo √† direita
    STEERING_CENTER = 90     # 90¬∞ = posi√ß√£o central

    # Range de dire√ß√£o √∫til (COMPLETO 0¬∞-180¬∞)
    MAX_STEERING_LEFT = -90  # -90¬∞ (esquerda m√°xima: 90¬∞-90¬∞=0¬∞)
    MAX_STEERING_RIGHT = 90  # +90¬∞ (direita m√°xima: 90¬∞+90¬∞=180¬∞)

    def __init__(
        self,
        steering_channel: int = None,
        pca9685_address: int = None,
        steering_sensitivity: float = 1.0,
        max_steering_angle: float = 90.0,  # RANGE COMPLETO
        steering_mode: SteeringMode = SteeringMode.NORMAL,
        response_time: float = 0.15,
    ):
        """
        Inicializa o gerenciador de dire√ß√£o

        Args:
            steering_channel (int): Canal PCA9685 do servo de dire√ß√£o
            pca9685_address (int): Endere√ßo I2C do PCA9685
            steering_sensitivity (float): Sensibilidade da dire√ß√£o (0.5-2.0)
            max_steering_angle (float): √Çngulo m√°ximo de ester√ßamento
            steering_mode (SteeringMode): Modo de dire√ß√£o
            response_time (float): Tempo de resposta da dire√ß√£o
        """
        self.steering_channel = steering_channel or self.STEERING_CHANNEL
        self.pca9685_address = pca9685_address or self.PCA9685_I2C_ADDRESS

        # Configura√ß√µes
        self.steering_sensitivity = max(0.5, min(2.0, steering_sensitivity))
        self.max_steering_angle = max(10.0, min(90.0, max_steering_angle))  # M√°ximo 90¬∞ (range completo)
        self.steering_mode = steering_mode
        self.response_time = max(0.05, response_time)

        # Estado da dire√ß√£o
        self.is_initialized = False
        self.current_angle = 0.0  # √Çngulo atual (-90¬∞ a +90¬∞)
        self.target_angle = 0.0  # √Çngulo alvo
        self.servo_angle = self.STEERING_CENTER  # √Çngulo do servo (0¬∞ a 180¬∞)
        self.steering_input = 0.0  # Input de dire√ß√£o (-100% a +100%)

        # Controle PCA9685
        self.pca9685 = None
        self.i2c = None
        self.steering_servo = None

        # REMOVIDO: movimento suave - usando movimento direto

        # REMOVIDO: Sistema Ackermann - usando movimento direto
        # REMOVIDO: Compensa√ß√£o de velocidade - usando movimento direto

        # Estat√≠sticas
        self.total_steering_movements = 0
        self.total_steering_angle = 0.0
        self.max_angle_reached = 0.0
        self.start_time = time.time()
        self.last_movement_time = 0.0

        # REMOVIDO: Calibra√ß√£o - usando movimento direto
        # REMOVIDO: Limites de seguran√ßa - usando movimento direto
        # REMOVIDO: Emergency center - usando movimento direto

    def initialize(self) -> bool:
        """
        Inicializa o sistema de dire√ß√£o via PCA9685

        Returns:
            bool: True se inicializado com sucesso
        """
        print("Inicializando sistema de dire√ß√£o via PCA9685...")
        print(f"Servo dire√ß√£o: Canal {self.steering_channel} do PCA9685")
        print(f"Endere√ßo I2C: 0x{self.pca9685_address:02X}")
        print(f"Modo: {self.steering_mode.value.upper()}")
        print(f"Sensibilidade: {self.steering_sensitivity:.1f}x")
        print(f"√Çngulo m√°ximo: ¬±{self.max_steering_angle}¬∞")
        print("Geometria Ackermann: DESABILITADA (movimento direto)")

        try:
            # Inicializa barramento I2C (pode ser compartilhado com brake_manager)
            self.i2c = busio.I2C(board.SCL, board.SDA)
            print("‚úì Barramento I2C inicializado")

            # Inicializa PCA9685
            self.pca9685 = PCA9685(self.i2c, address=self.pca9685_address)
            self.pca9685.frequency = self.PWM_FREQUENCY
            print(f"‚úì PCA9685 inicializado @ {self.PWM_FREQUENCY}Hz")

            # Configura servo no canal especificado
            self.steering_servo = servo.Servo(
                self.pca9685.channels[self.steering_channel],
                min_pulse=int(self.PULSE_MIN * 1000),  # converte para microssegundos
                max_pulse=int(self.PULSE_MAX * 1000),
            )
            print(f"‚úì Servo dire√ß√£o configurado (canal {self.steering_channel})")

            # Posiciona servo na posi√ß√£o central
            self.steering_servo.angle = self.STEERING_CENTER
            print(f"‚úì Servo posicionado na posi√ß√£o central ({self.STEERING_CENTER}¬∞)")

            # Aguarda servo se posicionar
            time.sleep(0.5)

            # REMOVIDO: thread de movimento suave - usando movimento direto

            self.is_initialized = True

            print("‚úÖ Sistema de dire√ß√£o inicializado com sucesso!")
            print(f"  - Frequ√™ncia PWM: {self.PWM_FREQUENCY}Hz")
            print(f"  - Posi√ß√£o inicial: {self.STEERING_CENTER}¬∞ (centro)")
            print(f"  - Range: {self.STEERING_MIN_ANGLE}¬∞ a {self.STEERING_MAX_ANGLE}¬∞ (COMPLETO)")
            print("  - Movimento: DIRETO (sem suaviza√ß√£o)")
            print(f"  - Canal dire√ß√£o: {self.steering_channel}")

            # Teste r√°pido da dire√ß√£o
            self._test_steering()

            return True

        except Exception as e:
            print(f"‚ùå Erro ao inicializar dire√ß√£o: {e}")
            print("\nVerifique:")
            print("1. Conex√µes do PCA9685 (VCC, GND, SDA, SCL)")
            print("2. Conex√£o do servo no PCA9685 (canal correto)")
            print("3. Alimenta√ß√£o do servo (fonte externa 6V recomendada)")
            print("4. sudo raspi-config -> Interface Options -> I2C -> Enable")
            print("5. sudo pip3 install adafruit-circuitpython-pca9685")

            self.is_initialized = False
            return False

    # REMOVIDO: fun√ß√µes de movimento suave - usando movimento direto

    def set_steering_input(self, steering_input: float, speed_kmh: float = 0.0):
        """
        Define entrada de dire√ß√£o

        Args:
            steering_input (float): Entrada de dire√ß√£o -100% a +100%
                                  (-100% = m√°ximo esquerda, +100% = m√°ximo direita)
            speed_kmh (float): Velocidade atual em km/h para compensa√ß√£o
        """
        if not self.is_initialized:
            print("‚ö† Sistema de dire√ß√£o n√£o inicializado")
            return

        print(f"üèéÔ∏è DIRE√á√ÉO: {steering_input:.1f}% recebido")

        # REMOVIDO: parada de emerg√™ncia - movimento direto

        # Garante range v√°lido
        steering_input = max(-100.0, min(100.0, steering_input))
        self.steering_input = steering_input

        # MOVIMENTO DIRETO - converte entrada (-100% a +100%) para √¢ngulo (-90¬∞ a +90¬∞)
        target_angle = (steering_input / 100.0) * self.max_steering_angle

        # REMOVIDO: Limites de seguran√ßa - usar range completo
        # REMOVIDO: Geometria Ackermann - movimento direto sem corre√ß√µes

        self.target_angle = target_angle

        # MOVIMENTO DIRETO - igual aos testes funcionais
        self.current_angle = target_angle
        self.servo_angle = self.STEERING_CENTER + self.current_angle

        # Aplica movimento DIRETO ao servo
        if self.steering_servo:
            # Limita √¢ngulo ao range v√°lido do servo (0¬∞ a 180¬∞)
            final_angle = max(
                self.STEERING_MIN_ANGLE,
                min(self.STEERING_MAX_ANGLE, self.servo_angle),
            )

            # COMANDO DIRETO - igual ao test_steering_direto_simples.py
            self.steering_servo.angle = final_angle

            print(f"üéØ Target: {target_angle:.1f}¬∞ ‚Üí Servo: {final_angle:.1f}¬∞ (input: {steering_input:.1f}%)")
        else:
            print(f"‚ö†Ô∏è Servo n√£o inicializado!")

        print(
            f"üéØ Target angle definido: {target_angle:.1f}¬∞ (input: {steering_input:.1f}%)"
        )

        # Atualiza estat√≠sticas
        if abs(steering_input) > 5:  # Movimento significativo
            self.total_steering_movements += 1
            self.total_steering_angle += abs(target_angle)
            self.max_angle_reached = max(self.max_angle_reached, abs(target_angle))
            self.last_movement_time = time.time()

        # Debug para movimentos grandes
        if abs(steering_input) > 20:
            print(
                f"üîß Dire√ß√£o: {steering_input:+.0f}% ‚Üí {target_angle:+.1f}¬∞ "
                f"(Velocidade: {speed_kmh:.1f} km/h)"
            )

    # REMOVIDO: fun√ß√µes auxiliares n√£o usadas - movimento direto

    def center_steering(self):
        """Centraliza a dire√ß√£o"""
        self.set_steering_input(0.0)
        print("üîß Dire√ß√£o centralizada")

    # REMOVIDO: fun√ß√µes n√£o usadas - movimento direto

    def _test_steering(self):
        """Executa teste r√°pido da dire√ß√£o - MOVIMENTO DIRETO"""
        print("Executando teste da dire√ß√£o...")

        try:
            # Teste esquerda
            print("  - Testando dire√ß√£o esquerda...")
            self.set_steering_input(-50.0)  # 50% esquerda
            time.sleep(0.8)

            # Centro
            print("  - Retornando ao centro...")
            self.center_steering()
            time.sleep(0.8)

            # Teste direita
            print("  - Testando dire√ß√£o direita...")
            self.set_steering_input(50.0)  # 50% direita
            time.sleep(0.8)

            # Centro final
            self.center_steering()
            time.sleep(0.5)

            print("‚úì Teste da dire√ß√£o conclu√≠do")

        except Exception as e:
            print(f"‚ö† Erro durante teste: {e}")

    # REMOVIDO: calibra√ß√£o - movimento direto

    def get_steering_status(self) -> Dict[str, Any]:
        """
        Obt√©m status completo da dire√ß√£o

        Returns:
            dict: Status atual da dire√ß√£o
        """
        return {
            # === CONFIGURA√á√ÉO ===
            "steering_mode": self.steering_mode.value,
            "steering_sensitivity": round(self.steering_sensitivity, 2),
            "max_steering_angle": round(self.max_steering_angle, 1),
            "response_time": round(self.response_time, 3),
            # === ESTADO ATUAL ===
            "steering_input": round(self.steering_input, 1),
            "current_angle": round(self.current_angle, 1),
            "target_angle": round(self.target_angle, 1),
            "servo_angle": round(self.servo_angle, 1),
            # === √ÇNGULOS EM DIFERENTES FORMATOS ===
            "angle_degrees": round(self.current_angle, 1),
            "angle_percent": round(
                (self.current_angle / self.max_steering_angle) * 100, 1
            ),
            "steering_left": self.current_angle < -2.0,
            "steering_right": self.current_angle > 2.0,
            "steering_center": abs(self.current_angle) <= 2.0,
            # === MOVIMENTO DIRETO (sem compensa√ß√µes) ===
            # === STATUS T√âCNICO ===
            "is_initialized": self.is_initialized,
            # === ESTAT√çSTICAS ===
            "total_movements": self.total_steering_movements,
            "max_angle_reached": round(self.max_angle_reached, 1),
            "last_movement_time": self.last_movement_time,
            # === HARDWARE ===
            "steering_channel": self.steering_channel,
            "pca9685_address": f"0x{self.pca9685_address:02X}",
            "pwm_frequency": self.PWM_FREQUENCY,
            "pca9685_available": PCA9685_AVAILABLE,
            # === TIMESTAMP ===
            "timestamp": round(time.time(), 3),
        }

    def get_wheel_angles(self) -> Dict[str, float]:
        """
        Calcula √¢ngulos individuais das rodas (Ackermann)

        Returns:
            dict: √Çngulos das rodas esquerda e direita
        """
        # REMOVIDO: ackermann sempre desabilitado - retorna √¢ngulos simples
        return {
            "left_wheel": round(self.current_angle, 1),
            "right_wheel": round(self.current_angle, 1),
            "turn_radius": float("inf"),
        }

    def get_statistics(self) -> Dict[str, Any]:
        """
        Obt√©m estat√≠sticas de uso da dire√ß√£o

        Returns:
            dict: Estat√≠sticas de opera√ß√£o
        """
        elapsed = time.time() - self.start_time

        return {
            "total_movements": self.total_steering_movements,
            "total_steering_angle": round(self.total_steering_angle, 1),
            "max_angle_reached": round(self.max_angle_reached, 1),
            "average_angle": round(
                self.total_steering_angle / max(1, self.total_steering_movements), 1
            ),
            "movements_per_minute": (
                round(self.total_steering_movements / (elapsed / 60), 1)
                if elapsed > 0
                else 0
            ),
            "system_uptime": round(elapsed, 2),
            # REMOVIDO: calibra√ß√£o n√£o usada
            "steering_mode": self.steering_mode.value,
        }

    def cleanup(self):
        """Libera recursos da dire√ß√£o"""
        try:
            print("Finalizando sistema de dire√ß√£o...")

            # Centraliza dire√ß√£o antes de desligar
            self.center_steering()
            time.sleep(0.2)

            # Libera recursos do PCA9685
            if self.steering_servo:
                self.steering_servo = None
            if self.pca9685:
                self.pca9685.deinit()
                self.pca9685 = None
            if self.i2c:
                self.i2c.deinit()
                self.i2c = None

            self.is_initialized = False
            print("‚úì Sistema de dire√ß√£o finalizado")

        except Exception as e:
            print(f"‚ö† Erro ao finalizar dire√ß√£o: {e}")

    def __del__(self):
        """Destrutor - garante limpeza dos recursos"""
        self.cleanup()


# Exemplo de uso
if __name__ == "__main__":
    print("=== TESTE DO SISTEMA DE DIRE√á√ÉO ===")

    # Cria inst√¢ncia da dire√ß√£o com PCA9685
    steering_mgr = SteeringManager(
        steering_channel=2,  # Canal 2 do PCA9685 para dire√ß√£o
        pca9685_address=0x40,  # Endere√ßo I2C padr√£o do PCA9685 (compartilhado)
        steering_sensitivity=1.2,
        max_steering_angle=40.0,
        steering_mode=SteeringMode.SPORT,
        response_time=0.12,
    )

    # Inicializa
    if steering_mgr.initialize():
        print("\n=== TESTE DE DIRE√á√ÉO ===")

        # Teste 1: Movimento progressivo
        print("1. Teste de movimento progressivo...")
        for angle in [-100, -50, -25, 0, 25, 50, 100, 50, 0]:
            print(f"   Dire√ß√£o: {angle:+3.0f}%")
            steering_mgr.set_steering_input(angle, speed_kmh=20.0)
            time.sleep(1.0)

            status = steering_mgr.get_steering_status()
            wheels = steering_mgr.get_wheel_angles()

            print(
                f"   √Çngulo: {status['current_angle']:+.1f}¬∞, "
                f"Rodas: E={wheels['left_wheel']:+.1f}¬∞ D={wheels['right_wheel']:+.1f}¬∞"
            )

        # Teste 2: Diferentes modos
        print("\n2. Teste de modos de dire√ß√£o...")
        steering_mgr.set_steering_input(50.0, speed_kmh=30.0)  # 50% direita

        for mode in [SteeringMode.COMFORT, SteeringMode.NORMAL, SteeringMode.SPORT]:
            print(f"   Modo: {mode.value.upper()}")
            steering_mgr.set_steering_mode(mode)
            steering_mgr.set_steering_input(50.0, speed_kmh=30.0)
            time.sleep(0.8)

            status = steering_mgr.get_steering_status()
            print(f"   √Çngulo resultante: {status['current_angle']:+.1f}¬∞")

        # Teste 3: Compensa√ß√£o de velocidade
        print("\n3. Teste de compensa√ß√£o de velocidade...")
        steering_mgr.set_steering_mode(SteeringMode.NORMAL)

        for speed in [0, 10, 20, 40, 60]:
            print(f"   Velocidade: {speed} km/h")
            steering_mgr.set_steering_input(75.0, speed_kmh=speed)
            time.sleep(0.5)

            status = steering_mgr.get_steering_status()
            print(f"   √Çngulo com compensa√ß√£o: {status['current_angle']:+.1f}¬∞")

        # Teste 4: Geometria Ackermann
        print("\n4. Teste de geometria Ackermann...")
        steering_mgr.set_steering_input(60.0, speed_kmh=25.0)
        time.sleep(1.0)

        wheels = steering_mgr.get_wheel_angles()
        print("   Entrada: 60% direita")
        print(f"   Roda esquerda (externa): {wheels['left_wheel']:+.1f}¬∞")
        print(f"   Roda direita (interna): {wheels['right_wheel']:+.1f}¬∞")
        print(f"   Raio de curvatura: {wheels['turn_radius']:.2f}m")

        # Centraliza
        steering_mgr.center_steering()
        time.sleep(1.0)

        # Estat√≠sticas finais
        stats = steering_mgr.get_statistics()
        print("\n=== ESTAT√çSTICAS FINAIS ===")
        print(f"Movimentos de dire√ß√£o: {stats['total_movements']}")
        print(f"√Çngulo total percorrido: {stats['total_steering_angle']:.1f}¬∞")
        print(f"√Çngulo m√°ximo atingido: {stats['max_angle_reached']:.1f}¬∞")
        print(f"√Çngulo m√©dio: {stats['average_angle']:.1f}¬∞")
        print(f"Movimentos/minuto: {stats['movements_per_minute']:.1f}")

        # Finaliza
        steering_mgr.cleanup()

    else:
        print("‚úó Falha ao inicializar dire√ß√£o")
        print("\nPara usar com hardware real:")
        print("1. Conecte servo conforme pinout no cabe√ßalho")
        print("2. Fonte de alimenta√ß√£o adequada (5V-6V)")
        print("3. sudo apt-get install python3-rpi.gpio")
        print("4. Verifique conex√µes e calibra√ß√£o mec√¢nica")
